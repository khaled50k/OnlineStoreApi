// This module exports a router object for handling Order related requests

const router = require("express").Router();

// Importing middleware functions from verifyToken.js
const { verifyTokenAndAdmin,verifyTokenAndAuthorization } = require("./verifyToken");

// Importing the Order model
const Order = require("../models/Order");

// Route for creating a new Order, accessible only to admin users who have a valid token
router.post("/", verifyTokenAndAdmin, async (req, res) => {
  try {
    const newOrder = await Order.create(req.body);
    await newOrder.updateAmount(); // Update the total amount of the order
    res.status(200).json(newOrder);
  } catch (error) {
    res.status(500).json(error);
  }
});

// Route for retrieving all Orders, accessible only to admin users who have a valid token
router.get("/", verifyTokenAndAdmin, async (req, res) => {
  try {
    const orders = await Order.find();
    res.status(200).json(orders);
  } catch (error) {
    res.status(500).json(error);
  }
});

// Route for retrieving Orders for a specific user, accessible to authorized users who have a valid token
router.get("/find/:userId", verifyTokenAndAuthorization, async (req, res) => {
  try {
    const orders = await Order.find({ userId: req.params.userId });
    res.status(200).json(orders);
  } catch (error) {
    res.status(500).json(error);
  }
});

// Route for retrieving the income generated by all Orders within a specified number of months, accessible only to admin users who have a valid token
router.get("/income", verifyTokenAndAdmin, async (req, res) => {
  try {
    const numMonths = req.query.month || 1; // Default to 1 month ago if no query parameter is provided
    const endDate = new Date();
    const startDate = new Date(
      endDate.setMonth(endDate.getMonth() - numMonths)
    );
    const income = await Order.aggregate([
      {
        $match: {
          createdAt: { $gte: startDate },
          status: { $ne: "cancelled" },
        },
      },
      {
        $project: {
          month: { $month: "$createdAt" },
          sales: "$amount",
        },
      },
      {
        $group: {
          _id: "$month",
          total: { $sum: "$sales" },
        },
      },
    ]);
    res.status(200).json(income);
  } catch (error) {
    res.status(500).json(error);
  }
});

// Route for updating an existing Order, accessible only to admin users who have a valid token
router.put("/:id", verifyTokenAndAdmin, async (req, res) => {
  try {
    const updatedOrder = await Order.findByIdAndUpdate(
      req.params.id,
      {
        $set: req.body,
      },
      { new: true } // Return the updated document
    );
    await updatedOrder.updateAmount(); // Update the total amount of the order
    res.status(200).json(updatedOrder);
  } catch (error) {
    res.status(500).json(error);
  }
});

// Route for deleting an existing Order, accessible only to admin users who have a valid token
router.delete("/:id", verifyTokenAndAdmin, async (req, res) => {
  try {
    await Order.findByIdAndRemove(req.params.id);
    res.status(200).json("Order has been deleted");
  } catch (error) {
    res.status(500).json(error);
  }
});

module.exports = router;
